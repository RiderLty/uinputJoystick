import logging
import threading
import cv2
import coloredlogs
from os.path import join as path_join

from fastapi import FastAPI, Response, WebSocket
from fastapi.responses import FileResponse
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.gzip import GZipMiddleware
from uvicorn import Config, Server

from utils.taskScheduler import scheduled
from utils.imgTools import *
from utils.scriptActions import *
from utils.tools import *



# README
#
# ÂÖàÂÆâË£Ö‰æùËµñÔºö
# pip install pywin32 cnocr[ort-cpu] mss vgamepad  Pillow  fastapi coloredlogs uvicorn[standard]
#
# windowsÂàÜËæ®Áéá 1920x1080 Áº©Êîæ100%
# Ê∏∏ÊàèÂÜÖ HUDÂ∞∫ÂØ∏ 200%
# ÂÖ≥Èó≠ÔºöËæÖÂä©ÁûÑÂáÜ Âä®ÊÄÅHUD Â±èÂπïÊôÉÂä®
# ÊâãÊüÑÊîπÈîÆÔºöÊñπÂêëÂ∑¶ÁûÑÂáÜÔºåÊñπÂêëÂè≥Â∞ÑÂáª
#
# ÊâãÊú∫ÊµèËßàÂô®ËÆøÈóÆ  http://[ÁîµËÑëIP]:4443
# ÂáÜÂ§áÂ∑•‰ΩúÂÅöÂ•ΩÂêéÔºåESCÊöÇÂÅúÔºåÁÑ∂ÂêéÁΩëÈ°µÁ´ØÁÇπÂáªÂºÄÂßã

# XBOXÊåÇÊú∫ÁöÑÊó∂ÂÄôËÆ∞ÂæóÂÖ≥Èó≠ËæÖÂä©ÁûÑÂáÜ


# TYPE = scriptType.fire_multi
TYPE = scriptType.nidus_single

WINDOWS = sys.platform.startswith('win')




#==============================================================================================================
wsLoggerClients = set()

if WINDOWS:
    ctr = scheduled(controller=controller())
else:    
    ctr = scheduled(controller=controller("127.0.0.1:8889"))
    
warframe = actions(ctr=ctr)
fsm = ThreadSafeValue(-1) #Áä∂ÊÄÅÊú∫
#==============================================================================================================

def mainLoop(state: ThreadSafeValue , ctr:scheduled , type  :scriptType , logger : logging.Logger):
    while True:
        if state.get_value() != 0:
            logger.info("‰∏ªÂæ™ÁéØÂ∑≤ÊöÇÂÅú")
            state.waitFor(0)
            logger.info("‰∏ªÂæ™ÁéØÂ∑≤ÂêØÂä®")
        type == scriptType.nidus_single and warframe.mainLoopOnceWait_with_backRight()
        type == scriptType.fire_multi and warframe.mainLoop_shoot_and_move()




if WINDOWS:
    from cnocr import CnOcr
    def watcher(state: ThreadSafeValue , ctr:scheduled , type  :scriptType , logger : logging.Logger):
        cnocrInstance = CnOcr()
        def goto(x):
            state.set_value(x)
        def eq(x):
            return state.get_value() == x
        def breakActions():
            ctr.interrupt()
            ctr.wait()
        def autoSelectHT():
            warframe.clusterReset()
            maxValue = -1
            ctr.sleep(100)
            ctr.click(BTN.BTN_DPAD_DOWN)
            ctr.sleep(50)
            ctr.click(BTN.BTN_DPAD_DOWN)
            ctr.sleep(50)
            for i in range(4):
                if i != 0:
                    ctr.click(BTN.BTN_DPAD_RIGHT)  # ‰∏§Ê¨°‰∏ãÂ∞±ÊòØÁ¨¨‰∏Ä‰∏™‰∫Ü
                ctr.sleep(700)
                ctr.wait()
                screen = handelScreen(mss2np())
                ocrResult = cnocrInstance.ocr(screen)
                allText = "#".join([x["text"].strip() for x in ocrResult]).strip()
                logger.debug(allText)
                for keyword in ["ÊùúÂç°Âæ∑", "Á§æÂç°Âæ∑"]:
                    if keyword in allText:
                        logger.info(f"Ê£ÄÊµãÂà∞ÂÖ≥ÈîÆËØç {keyword}")
                        value = int(remove_non_digits(
                            allText.split(keyword)[0].split("#")[-1]))
                        logger.info(f"ÂΩìÂâçÈáëÂ∏ÅÂÄº‰∏∫{value}")
                        if value >= maxValue:
                            maxValue = value
                            ctr.click(BTN.BTN_A)
                            ctr.wait()
                        break
            ctr.wait()
        while True:
            # sc_img = handelScreen(mss2np())  # ËäÇÁúÅËµÑÊ∫êÁöÑÔºå‰∏çÁî®‰∫Ü
            sc_img = mss2np()
            out = cnocrInstance.ocr(sc_img)
            allText = "#".join([f'{x["text"].strip()}'for x in out]).strip()
            latestState = state.get_value()
            if eq(-1):  # ÂÅúÊ≠¢Áä∂ÊÄÅ
                logger.info("ËßÇÂØüËÄÖÂ∑≤ÊöÇÂÅú")
                state.waitFor(0)  # Á≠âÂæÖ0
                logger.info("ËßÇÂØüËÄÖÂ∑≤ÂêØÂä®")
            elif eq(0):  # Â§öÊï∞Êó∂ÂÄôÁöÑÁä∂ÊÄÅ
                if checkText(allText, ["Êù•Â§çÊ¥ª", "ÂâçÂæÄÊí§Á¶ªÁÇπ"]):  # ÂÅúÊ≠¢‰ø°Âè∑
                    goto(1)  # ÂÜçÊ¨°Á°ÆËÆ§
                elif checkText(allText, ["Êä•ÈÖ¨"]):  # Ê†∏Ê°ÉÂºÄ‰∫Ü
                    goto(3)  # Á≠âÂæÖÈÄâÊã©ÈÅóÁâ©
                    breakActions()  # ÂÅúÊ≠¢Âä®‰Ωú
                    type == scriptType.fire_multi and autoSelectHT()  # Âçï‰∫∫ËÆ∞ÂæóÊ≥®ÈáäÊéâ
                else:
                    pass  # ‰∏çÊâßË°å‰ªª‰ΩïÂä®‰Ωú
            elif eq(1):
                if checkText(allText, ["Êù•Â§çÊ¥ª", "ÂâçÂæÄÊí§Á¶ªÁÇπ"]):  # ÂÅúÊ≠¢‰ø°Âè∑
                    goto(2)  # ÂÜçÊ¨°Á°ÆËÆ§
                else:
                    goto(0)  # Ê≤°‰∫Ü ÂõûÂà∞‰∏ªÁä∂ÊÄÅ
            elif eq(2):
                if checkText(allText, ["Êù•Â§çÊ¥ª", "ÂâçÂæÄÊí§Á¶ªÁÇπ"]):  # ÂÅúÊ≠¢‰∫Ü
                    goto(-1)  # Âà∞ÂÅúÊ≠¢ÊÄÅ
                    breakActions()
                    ctr.click(BTN.BTN_START)
                else:
                    goto(0)  # Ê≤°‰∫Ü ÂõûÂà∞‰∏ªÁä∂ÊÄÅ
            elif eq(3):
                if checkText(allText, ["ÈÄâÊã©ÈÅóÁâ©"]):  # ÈÄâÊã©ÈÅóÁâ©‰∫Ü
                    goto(4)  # Âà∞Á≠âÂæÖÁä∂ÊÄÅ
                    warframe.clusterReset()
                    warframe.selectHT()
                else:
                    pass
            elif eq(4):
                if checkText(allText, ["ÁîüÂ≠ò"]):
                    ctr.sleep(500)
                    goto(0)  # Ê£ÄÊµãÂà∞ÂÖ≥ÈîÆËØç ÂõûÂà∞‰∏ªÁä∂ÊÄÅ
                else:
                    pass  # ÁªßÁª≠Á≠âÂæÖ
            latestState != state.get_value() and logger.info(f"Áä∂ÊÄÅÊîπÂèò {latestState} => {state.get_value()}")
            sleep(1000)
else:
    def watcher(state: ThreadSafeValue , ctr:scheduled , type  :scriptType , logger : logging.Logger):
        def goto(x):
            state.set_value(x)
        def eq(x):
            return state.get_value() == x
        def breakActions():
            ctr.interrupt()
            ctr.wait()
        while True:
            sc_img = url2ImgNp("http://127.0.0.1:8888/screen.png")
            latestState = state.get_value()
            if eq(-1):  # ÂÅúÊ≠¢Áä∂ÊÄÅ
                logger.info("ËßÇÂØüËÄÖÂ∑≤ÊöÇÂÅú")
                state.waitFor(0)  # Á≠âÂæÖ0
                logger.info("ËßÇÂØüËÄÖÂ∑≤ÂêØÂä®")
            elif eq(0):  # Â§öÊï∞Êó∂ÂÄôÁöÑÁä∂ÊÄÅ
                logger.debug("ÂåπÈÖçÊí§Á¶ª‰∏éÂ§çÊ¥ª")
                logger.debug("ÂåπÈÖç Êä•ÈÖ¨.png")
                if len(templateMatch(sc_img , cv2.imread("controller/assets/lfh.png"))) > 0 or len(templateMatch(sc_img , cv2.imread("controller/assets/cld.png"))) > 0:  # ÂÅúÊ≠¢‰ø°Âè∑
                    goto(1)  # ÂÜçÊ¨°Á°ÆËÆ§
                elif len(templateMatch(sc_img , cv2.imread("controller/assets/bc.png"))) > 0:  # Ê†∏Ê°ÉÂºÄ‰∫Ü
                    goto(3)  # Á≠âÂæÖÈÄâÊã©ÈÅóÁâ©
                    breakActions()  # ÂÅúÊ≠¢Âä®‰Ωú
                else:
                    pass  # ‰∏çÊâßË°å‰ªª‰ΩïÂä®‰Ωú
            elif eq(1):
                logger.debug("ÂåπÈÖçÊí§Á¶ª‰∏éÂ§çÊ¥ª")
                if len(templateMatch(sc_img , cv2.imread("controller/assets/lfh.png"))) > 0 or len(templateMatch(sc_img , cv2.imread("controller/assets/cld.png"))) > 0:  # ÂÅúÊ≠¢‰ø°Âè∑
                    goto(2)  # ÂÜçÊ¨°Á°ÆËÆ§
                else:
                    goto(0)  # Ê≤°‰∫Ü ÂõûÂà∞‰∏ªÁä∂ÊÄÅ
            elif eq(2):
                logger.debug("ÂåπÈÖçÊí§Á¶ª‰∏éÂ§çÊ¥ª")
                if len(templateMatch(sc_img , cv2.imread("controller/assets/lfh.png"))) > 0 or len(templateMatch(sc_img , cv2.imread("controller/assets/cld.png"))) > 0:  # ÂÅúÊ≠¢‰∫Ü
                    goto(-1)  # Âà∞ÂÅúÊ≠¢ÊÄÅ
                    breakActions()
                    ctr.click(BTN.BTN_START)
                else:
                    goto(0)  # Ê≤°‰∫Ü ÂõûÂà∞‰∏ªÁä∂ÊÄÅ
            elif eq(3):
                logger.debug("ÂåπÈÖç ÈÄâÊã©ÈÅóÁâ©.png")
                if len(templateMatch(sc_img , cv2.imread("controller/assets/xzyw.png"))) > 0:  # ÈÄâÊã©ÈÅóÁâ©‰∫Ü
                    goto(4)  # Âà∞Á≠âÂæÖÁä∂ÊÄÅ
                    warframe.dpadReset()
                    warframe.selectHT()
                else:
                    pass
            elif eq(4):
                logger.debug("ÂåπÈÖç ÁîüÂ≠ò.png")
                if len(templateMatch(sc_img , cv2.imread("controller/assets/sc.png"))) > 0:
                    ctr.sleep(500)
                    goto(0)  # Ê£ÄÊµãÂà∞ÂÖ≥ÈîÆËØç ÂõûÂà∞‰∏ªÁä∂ÊÄÅ
                else:
                    pass  # ÁªßÁª≠Á≠âÂæÖ
            latestState != state.get_value() and logger.info(f"Áä∂ÊÄÅÊîπÂèò {latestState} => {state.get_value()}")
            sleep(300)


def init_logger():
    LOGGER_NAMES = ("uvicorn", "uvicorn.access",)
    for logger_name in LOGGER_NAMES:
        logging_logger = logging.getLogger(logger_name)
        fmt = f"üåè%(asctime)s .%(levelname)s %(message)s"  # üì®
        coloredlogs.install(
            level=logging.WARN, logger=logging_logger, milliseconds=False, datefmt='%m-%d %H:%M:%S', fmt=fmt
        )

#==============================================================================================================
logger = logging.getLogger(f'{"main"}:{"loger"}')
fmt = f"ü§ñ%(asctime)s .%(levelname)s %(message)s"
coloredlogs.install(
    level=logging.DEBUG, logger=logger, milliseconds=False, datefmt='%m-%d %H:%M:%S', fmt=fmt ,
)
formatter = logging.Formatter(fmt = f"ü§ñ%(asctime)s .%(levelname)s \t%(message)s" , datefmt='%m-%d %H:%M:%S')
def log_callback(message):
    global wsLoggerClients
    for ws in wsLoggerClients:
        mainEventLoop.create_task(ws.send_text(f"{message}"))

handler = CallbackHandler(callback=log_callback)
handler.setFormatter(formatter)
logger.addHandler(handler)
#==============================================================================================================



app = FastAPI()
app.add_middleware(GZipMiddleware, minimum_size=1000)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

mainEventLoop = asyncio.get_event_loop()


@app.get("/")
def index():
    return FileResponse(path_join("controller/html", "index.html"))


@app.get("/screen")
@app.get("/screen/{path}")
def screen_path(path: str = None):
    if WINDOWS:
        image = mss2np()
    else:
        image = url2ImgNp("http://127.0.0.1:8888/screen.png")
    
    if path == "raw":
        return Response(
        cv2.imencode('.png', image)[1].tobytes(),
        headers={"Content-Type": "image/jpeg",
                 "Cache-Control": "max-age=0"},
    )
  
    if path == "draw":
        image = drawHandelScreen(image)
    if path == "mask":
        image = handelScreen(image)
    return Response(
        cv2.imencode('.jpg', image,[int(cv2.IMWRITE_JPEG_QUALITY), 70])[1].tobytes(),
        headers={"Content-Type": "image/jpeg",
                 "Cache-Control": "max-age=0"},
    )


@app.get("/jmp")
def jmp():
    logger.info("ÁøªÂ¢ôx1")
    warframe.jump()


@app.get("/start")
def start():
    global fsm
    if fsm.get_value() == -1:
        logger.info("Â∑≤ÂèëÈÄÅÂºÄÂßãÊåá‰ª§")
        ctr.click(BTN.BTN_LS)
        ctr.sleep(100)
        ctr.click(BTN.BTN_B)
        ctr.sleep(1000)
        ctr.wait()
        fsm.set_value(0)
    else:
        logger.info("Â∑≤Âú®ËøêË°å")

@app.get("/stop")
def stop():
    if fsm.get_value() != -1:
        logger.info("Â∑≤ÂèëÈÄÅÂÅúÊ≠¢Êåá‰ª§")
        fsm.set_value(-1)
        ctr.interrupt()
        ctr.wait()
        ctr.click(BTN.BTN_START)
    else:
        logger.info("Â∑≤ÂÅúÊ≠¢")

@app.get("/test")  # ÊµãËØïÂáΩÊï∞ÊîæÂú®ËøôÈáåËøêË°å
def test():
    logger.info("ÊµãËØïÂáΩÊï∞ÊâßË°å‰∏≠")
    ctr.setRS(0, 1)
    ctr.sleep(300)
    ctr.setRS(0, 0)
    ctr.wait()
    logger.info("ÊµãËØïÂáΩÊï∞ÊâßË°åÂÆåÊØï")
    


@app.websocket("/wsLogger")
async def websocket_endpoint(websocket: WebSocket):
    # ËøûÊé•Âª∫Á´ãÊó∂ÔºåÂ∞ÜÂÆ¢Êà∑Á´ØÊ∑ªÂä†Âà∞ÈõÜÂêà‰∏≠
    await websocket.accept()
    wsLoggerClients.add(websocket)
    try:
        while True:
            data = await websocket.receive_text()
            pass
    except Exception as e:
        wsLoggerClients.remove(websocket)
        pass

app.mount("/", StaticFiles(directory="controller/html"), name="static")

def getServer(port):
    serverConfig = Config(
        app=app,
        # host="::",
        host="0.0.0.0",
        port=port,
        log_level="info",
        ws_max_size=1024*1024*1024*1024,
    )
    return Server(serverConfig)


if __name__ == "__main__":
    serverInstance = getServer(4443)
    init_logger()
    threading.Thread(target=mainLoop, args=(fsm,ctr,TYPE,logger)).start()
    threading.Thread(target=watcher, args=(fsm,ctr,TYPE,logger)).start()
    mainEventLoop.run_until_complete(serverInstance.serve())
